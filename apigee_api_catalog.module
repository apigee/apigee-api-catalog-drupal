<?php

/**
 * @file
 * Copyright 2019 Google Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License version 2 as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
 * License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

/**
 * @file
 * Module file for Apigee Edge: API Docs.
 */

use Drupal\apigee_api_catalog\SpecFetcherInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_help().
 */
function apigee_api_catalog_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the apigee_api_catalog module.
    case 'help.page.apigee_api_catalog':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Display documentation of your APIs to your developers using OpenAPI documentation.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_type_build().
 */
function apigee_api_catalog_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setFormClass('reimport_spec', '\Drupal\apigee_api_catalog\Entity\Form\ApiDocReimportSpecForm');
    $entity_types['node']->setLinkTemplate('reimport-spec-form', '/node/{node}/reimport');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function apigee_api_catalog_node_presave(EntityInterface $entity) {
  if ($entity->bundle() != 'apidoc') {
    return;
  }

  /* @var \Drupal\node\NodeInterface $entity */

  // Fetch spec file.
  \Drupal::service('apigee_api_catalog.spec_fetcher')
    ->fetchSpec($entity, FALSE, FALSE);

  // API docs that use the "file" source will still need their md5 updated.
  if ($entity->get('field_apidoc_spec_file_source')->value === SpecFetcherInterface::SPEC_AS_FILE) {
    $spec_value = $entity->get('field_apidoc_spec')->isEmpty() ? [] : $entity->get('field_apidoc_spec')->getValue()[0];
    if (!empty($spec_value['target_id'])) {
      /* @var \Drupal\file\Entity\File $file */
      $file = \Drupal::entityTypeManager()
        ->getStorage('file')
        ->load($spec_value['target_id']);

      if ($file) {
        $entity->set('field_apidoc_spec_md5', md5_file($file->getFileUri()));
      }
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function apigee_api_catalog_entity_operation(EntityInterface $entity) {
  $operations = [];

  if ($entity->bundle() == 'apidoc' && \Drupal::currentUser()->hasPermission('reimport apidoc specs')) {
    if ($entity->hasLinkTemplate('reimport-spec-form')) {
      $operations['reimport_spec'] = [
        'title' => t('Re-import OpenAPI spec'),
        'weight' => 100,
        'url' => $entity->toUrl('reimport-spec-form'),
      ];
    }
  }

  return $operations;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function apigee_api_catalog_node_insert(EntityInterface $entity) {
  apigee_api_catalog_node_update($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function apigee_api_catalog_node_update(EntityInterface $entity) {
  if ($entity->bundle() == 'apidoc') {
    $systemPath = '/node/' . $entity->id();
    $pathAlias = '/api/' . $entity->id();
    $langCode = $entity->language()->getId();
    $exists = \Drupal::service('path.alias_manager')->getAliasByPath($systemPath, $langCode);
    if ($exists == $systemPath) {
      \Drupal::service('path.alias_storage')->save($systemPath, $pathAlias, $langCode);
    }
  }
}
